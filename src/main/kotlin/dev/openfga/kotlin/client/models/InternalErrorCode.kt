/**
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.openfga.kotlin.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: noInternalError,internalError,cancelled,deadlineExceeded,alreadyExists,resourceExhausted,failedPrecondition,aborted,outOfRange,unavailable,dataLoss
 */

enum class InternalErrorCode(val value: kotlin.String) {

    @Json(name = "no_internal_error")
    noInternalError("no_internal_error"),

    @Json(name = "internal_error")
    internalError("internal_error"),

    @Json(name = "cancelled")
    cancelled("cancelled"),

    @Json(name = "deadline_exceeded")
    deadlineExceeded("deadline_exceeded"),

    @Json(name = "already_exists")
    alreadyExists("already_exists"),

    @Json(name = "resource_exhausted")
    resourceExhausted("resource_exhausted"),

    @Json(name = "failed_precondition")
    failedPrecondition("failed_precondition"),

    @Json(name = "aborted")
    aborted("aborted"),

    @Json(name = "out_of_range")
    outOfRange("out_of_range"),

    @Json(name = "unavailable")
    unavailable("unavailable"),

    @Json(name = "data_loss")
    dataLoss("data_loss");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is InternalErrorCode) "$data" else null

        /**
         * Returns a valid [InternalErrorCode] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): InternalErrorCode? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

